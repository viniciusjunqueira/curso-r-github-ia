name: CI/CD - Curso R

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    - cron: '0 0 * * 0'  # Toda semana verifica se os pacotes ainda funcionam
  workflow_dispatch:

jobs:
  verificar-codigo:
    name: Verificar Código R
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Configurar R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.3.0'
          use-public-rspm: true
          
      - name: Instalar dependências do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libpng-dev \
            libtiff5-dev \
            libjpeg-dev
            
      - name: Cache de pacotes R
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ hashFiles('DESCRIPTION') }}
          restore-keys: ${{ runner.os }}-r-
          
      - name: Instalar pacotes necessários
        run: |
          install.packages(c(
            "tidyverse", "ggplot2", "dplyr", "tidyr", "readr",
            "rmarkdown", "knitr", "here", "lintr", "styler"
          ))
        shell: Rscript {0}
        
      - name: Verificar estilo do código
        run: |
          library(lintr)
          r_files <- list.files(
            pattern = "\\.R$", 
            recursive = TRUE, 
            full.names = TRUE
          )
          r_files <- r_files[!grepl("renv", r_files)]
          
          results <- lapply(r_files, lintr::lint)
          
          # Salvar resultados
          saveRDS(results, "lint_results.rds")
          
          # Verificar se há erros críticos
          has_errors <- any(sapply(results, length) > 0)
          if (has_errors) {
            print(results)
            stop("Problemas de estilo encontrados no código!")
          }
        shell: Rscript {0}
        continue-on-error: true
        
  renderizar-materiais:
    name: Renderizar Materiais do Curso
    runs-on: ubuntu-latest
    needs: verificar-codigo
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Configurar R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.3.0'
          
      - name: Configurar Pandoc
        uses: r-lib/actions/setup-pandoc@v2
        
      - name: Instalar dependências
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev
          
      - name: Cache de pacotes
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-materials-${{ hashFiles('**/DESCRIPTION') }}
          
      - name: Instalar pacotes R
        run: |
          install.packages(c(
            "tidyverse", "ggplot2", "rmarkdown", 
            "knitr", "bookdown", "xaringan"
          ))
        shell: Rscript {0}
        
      - name: Renderizar arquivos .Rmd
        run: |
          # Renderizar todos os R Markdown
          rmd_files <- list.files(
            pattern = "\\.Rmd$", 
            recursive = TRUE, 
            full.names = TRUE
          )
          
          for (file in rmd_files) {
            tryCatch({
              message("Renderizando: ", file)
              rmarkdown::render(
                file, 
                output_format = "html_document",
                quiet = FALSE
              )
            }, error = function(e) {
              warning("Erro ao renderizar ", file, ": ", e$message)
            })
          }
        shell: Rscript {0}
        
      - name: Criar site do curso (se houver _bookdown.yml)
        if: hashFiles('_bookdown.yml') != ''
        run: |
          bookdown::render_book("index.Rmd", "bookdown::gitbook")
        shell: Rscript {0}
        
      - name: Upload dos arquivos renderizados
        uses: actions/upload-artifact@v3
        with:
          name: materiais-renderizados
          path: |
            **/*.html
            _book/
          retention-days: 30
          
  verificar-datasets:
    name: Verificar Integridade dos Datasets
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Configurar R
        uses: r-lib/actions/setup-r@v2
        
      - name: Instalar pacotes
        run: |
          install.packages(c("tidyverse", "readxl", "here"))
        shell: Rscript {0}
        
      - name: Verificar datasets
        run: |
          library(tidyverse)
          library(readxl)
          
          # Procurar por arquivos de dados
          csv_files <- list.files(
            path = "dados", 
            pattern = "\\.csv$", 
            full.names = TRUE,
            recursive = TRUE
          )
          
          xlsx_files <- list.files(
            path = "dados", 
            pattern = "\\.xlsx?$", 
            full.names = TRUE,
            recursive = TRUE
          )
          
          # Verificar CSVs
          for (file in csv_files) {
            tryCatch({
              data <- readr::read_csv(file, show_col_types = FALSE)
              message("✓ ", file, " - ", nrow(data), " linhas, ", 
                      ncol(data), " colunas")
            }, error = function(e) {
              stop("✗ Erro ao ler ", file, ": ", e$message)
            })
          }
          
          # Verificar Excel
          for (file in xlsx_files) {
            tryCatch({
              data <- readxl::read_excel(file)
              message("✓ ", file, " - ", nrow(data), " linhas, ", 
                      ncol(data), " colunas")
            }, error = function(e) {
              stop("✗ Erro ao ler ", file, ": ", e$message)
            })
          }
        shell: Rscript {0}
        
  deploy-site:
    name: Deploy do Site do Curso
    runs-on: ubuntu-latest
    needs: [renderizar-materiais]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Download dos materiais renderizados
        uses: actions/download-artifact@v3
        with:
          name: materiais-renderizados
          path: ./public
          
      - name: Deploy no GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          force_orphan: true